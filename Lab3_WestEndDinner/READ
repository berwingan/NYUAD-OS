I decided to go with a combination of semaphores and shared memory to run the program. I mostly use semaphores as locks and as a counter. For example, I used a sempahore to tell my server the number of people that are waiting for their room by using sem_getvalue. I mainly use fork() and exec() in order to run the entire program automatically. I also made a cook program whose sole purpose is to wait or cook the things that are ordered. Many times I used two semaphores to write something exclusive such as when a client exits it will write all its data into the restaurant before exiting, to do so it will first wait A semaphore in order to lock the writing to the shared space, the restaurant program will wait for then the value of A semaphore to drop to 0 to then wait for B semaphore. B semephore sole purpose to to entire that the entirety of the writing is finished by the client. After the client finished writing to the shared memory, it will sem_post B semephore which will then allow restaurant to process and read the shared memory. I also used this two way lock between the cook program and the server.
